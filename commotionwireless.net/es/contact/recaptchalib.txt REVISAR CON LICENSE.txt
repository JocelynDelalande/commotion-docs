<?php
/*
 * Esta es una biblioteca PHP que maneja llamando reCAPTCHA*********** that handles calling reCAPTCHA.
 *    - Documentación y última versión
 *          http://recaptcha.net/plugins/php/
 *    - Obtén una clave reCAPTCHA API 
 *          http://recaptcha.net/api/getkey
 *    - Grupo de Discusión
 *          http://groups.google.com/group/recaptcha
 *
 * Copyright (c) 2007 reCAPTCHA -- http://recaptcha.net
 * AUTORES:
 *   Mike Crawford
 *   Ben Maurer
 *
 * El permiso aquí se garantiza, libre de costo, a cualquier persona que obtenga  
 * una copia de este software y los archivos de documentación asociados (el
 * "Software"), para manejar el Software sin restricción, incluyendo sin limitación 
 * de derechos de uso, copia, modificación, fusión, publicación, distribución, 
 * sublicencia, y/o vender copias del Software, y permitir a las personas a quienes 
 * el Software está construido para hacerlo, sujetos a las siguientes condiciones:
 *
 * El aviso de copyright de arriba y este aviso de permiso deben ser incluidos en
 * todas las copias o porciones substanciales del Software
 *
 * EL SOFTWARE SE PROVEE "COMO ESTÁ", SIN GARANTÍA DE NINGÚN TIPO, EXPRESA O
 * IMPLICADA, INCLUYENDO PERO NO LIMITADO A GARANTÍAS DE COMERCIALIZACIÓN, 
 * IDONEIDAD PARA UN PROPÓSITO PARTICULAR Y NO INFRACCIÓN. EN NINGÚN CASO LOS
 * AUTORES O TITULARES DEL COPYRIGHT SERÁN RESPONSABLES DE NINGÚN RECLAMO, DAÑO U 
 * OTRA RESPONSABILIDAD, YA SEA EN UNA ACCIÓN DE CONTRATO, AGRAVIO O CUALQUIER,
 * OTRA FORMA, DERIVADOS DE, FUERA DE O EN CONEXIÓN CON EL SOFTWARE  O EL USO U
 * OTROS TRATOS EN EL SOFTWARE
 */

/**
 * La URL del servidor reCAPTCHA 
 */
define("RECAPTCHA_API_SERVER", "http://api.recaptcha.net");
define("RECAPTCHA_API_SECURE_SERVER", "https://api-secure.recaptcha.net");
define("RECAPTCHA_VERIFY_SERVER", "api-verify.recaptcha.net");

/**
 * Codifica esos datos dados en un formato de cadena de consulta
 * @param $data – conjunto de elementos en cadena para ser codificados
 * @return string – solicitud de codificación
 */
function _recaptcha_qsencode ($data) {
        $req = "";
        foreach ( $data as $key => $value )
                $req .= $key . '=' . urlencode( stripslashes($value) ) . '&';

        // Cut the last '&'
        $req=substr($req,0,strlen($req)-1);
        return $req;
}



/**
 * Submite un HTTP POST a un servidor reCAPTCHA 
 * @param string $host
 * @param string $path
 * @param array $data
 * @param int port
 * @return array response
 */
function _recaptcha_http_post($host, $path, $data, $port = 80) {

        $req = _recaptcha_qsencode ($data);

        $http_request  = "POST $path HTTP/1.0\r\n";
        $http_request .= "Host: $host\r\n";
        $http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";
        $http_request .= "Content-Length: " . strlen($req) . "\r\n";
        $http_request .= "User-Agent: reCAPTCHA/PHP\r\n";
        $http_request .= "\r\n";
        $http_request .= $req;

        $response = '';
        if( false == ( $fs = @fsockopen($host, $port, $errno, $errstr, 10) ) ) {
                die ('Could not open socket');
        }

        fwrite($fs, $http_request);

        while ( !feof($fs) )
                $response .= fgets($fs, 1160); // One TCP-IP packet
        fclose($fs);
        $response = explode("\r\n\r\n", $response, 2);

        return $response;
}



/**
 * Obtiene el reto HTML (versión javascript y no-javascript).
 * Esto se le llama del navegador, y el reCAPTCHA HTML widget resultante
 * está emmebido con la forma HTML de la que se llamó.
 * @param string $pubkey Una clave pública para reCAPTCHA
 * @param string $error El error dado por reCAPTCHA (opcional, por defecto es nulo)
 * @param boolean $use_ssl Debería la solicitud hacerse sobre ssl? (opcional, por defecto es falso)

 * @return string - The HTML to be embedded in the user's form.
 */
function recaptcha_get_html ($pubkey, $error = null, $use_ssl = false)
{
	if ($pubkey == null || $pubkey == '') {
		die ("To use reCAPTCHA you must get an API key from <a href='http://recaptcha.net/api/getkey'>http://recaptcha.net/api/getkey</a>");
	}
	
	if ($use_ssl) {
                $server = RECAPTCHA_API_SECURE_SERVER;
        } else {
                $server = RECAPTCHA_API_SERVER;
        }

        $errorpart = "";
        if ($error) {
           $errorpart = "&amp;error=" . $error;
        }
        return '<script type="text/javascript" src="'. $server . '/challenge?k=' . $pubkey . $errorpart . '"></script>

	<noscript>
  		<iframe src="'. $server . '/noscript?k=' . $pubkey . $errorpart . '" height="300" width="500" frameborder="0"></iframe><br>
  		<textarea name="recaptcha_challenge_field" rows="3" cols="40"></textarea>
  		<input type="hidden" name="recaptcha_response_field" value="manual_challenge">
	</noscript>';
}




/**
 * Una ReCaptchaResponse se regresa de recaptcha_check_answer()
 */
class ReCaptchaResponse {
        var $is_valid;
        var $error;
}


/**
  * Llama una función HTTP POST para verificar si lo que adivinó el usuario fue correcto
  * @param string $privkey
  * @param string $remoteip
  * @param string $challenge
  * @param string $response
  * @return ReCaptchaResponse
  */
function recaptcha_check_answer ($privkey, $remoteip, $challenge, $response)
{
	if ($privkey == null || $privkey == '') {
		die ("Para usar reCAPTCHA debes obtener una clave API de <a href='http://recaptcha.net/api/getkey'>http://recaptcha.net/api/getkey</a>");
	}

	if ($remoteip == null || $remoteip == '') {
		die ("Por razones de seguridad, debes pasar el ip remoto a reCAPTCHA");
	}

	
	
        //descarta envíos spam
        if ($challenge == null || strlen($challenge) == 0 || $response == null || strlen($response) == 0) {
                $recaptcha_response = new ReCaptchaResponse();
                $recaptcha_response->is_valid = false;
                $recaptcha_response->error = 'incorrect-captcha-sol';
                return $recaptcha_response;
        }

        $response = _recaptcha_http_post (RECAPTCHA_VERIFY_SERVER, "/verify",
                                          array (
                                                 'privatekey' => $privkey,
                                                 'remoteip' => $remoteip,
                                                 'challenge' => $challenge,
                                                 'response' => $response
                                                 )
                                          );

        $answers = explode ("\n", $response [1]);
        $recaptcha_response = new ReCaptchaResponse();

        if (trim ($answers [0]) == 'true') {
                $recaptcha_response->is_valid = true;
        }
        else {
                $recaptcha_response->is_valid = false;
                $recaptcha_response->error = $answers [1];
        }
        return $recaptcha_response;

}

/**
 * obtiene una URL donde el usuario puede inscribirte para reCAPTCHA. Si tu aplicación 
 * tiene una página de configuración donde ingresas una clave, deberías proporcionar un link
 * usando esta función.
 * @param string $domain El dominio donde la página está hospedada
 * @param string $appname El nombre de tu aplicación
 */
function recaptcha_get_signup_url ($domain = null, $appname = null) {
	return "http://recaptcha.net/api/getkey?" .  _recaptcha_qsencode (array ('domain' => $domain, 'app' => $appname));
}

function _recaptcha_aes_pad($val) {
	$block_size = 16;
	$numpad = $block_size - (strlen ($val) % $block_size);
	return str_pad($val, strlen ($val) + $numpad, chr($numpad));
}

/* Código Mailhide relacionado */

function _recaptcha_aes_encrypt($val,$ky) {
	if (! function_exists ("mcrypt_encrypt")) {
		die ("Para usar reCAPTCHA Mailhide, necesitas tener el módulo mcrypt php instalado.");
	}
	$mode=MCRYPT_MODE_CBC;   
	$enc=MCRYPT_RIJNDAEL_128;
	$val=_recaptcha_aes_pad($val);
	return mcrypt_encrypt($enc, $ky, $val, $mode, "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
}


function _recaptcha_mailhide_urlbase64 ($x) {
	return strtr(base64_encode ($x), '+/', '-_');
}

/* obtiene la reCAPTCHA Mailhide url para un correo electrónico dado, clave pública y clave privada */
function recaptcha_mailhide_url($pubkey, $privkey, $email) {
	if ($pubkey == '' || $pubkey == null || $privkey == "" || $privkey == null) {
		die ("Para usar reCAPTCHA Mailhide, te tienes que inscribir para una clave pública o privada, " .
		     "lo puedes hacer en <a href='http://mailhide.recaptcha.net/apikey'>http://mailhide.recaptcha.net/apikey</a>");
	}
	

	$ky = pack('H*', $privkey);
	$cryptmail = _recaptcha_aes_encrypt ($email, $ky);
	
	return "http://mailhide.recaptcha.net/d?k=" . $pubkey . "&c=" . _recaptcha_mailhide_urlbase64 ($cryptmail);
}

/**
 * obtiene las partes del correo para exponer al usuario.
 * eg, given johndoe@example,com return ["john", "example.com"].
 * el email se despliega entonces como john...@example.com
 */
function _recaptcha_mailhide_email_parts ($email) {
	$arr = preg_split("/@/", $email );

	if (strlen ($arr[0]) <= 4) {
		$arr[0] = substr ($arr[0], 0, 1);
	} else if (strlen ($arr[0]) <= 6) {
		$arr[0] = substr ($arr[0], 0, 3);
	} else {
		$arr[0] = substr ($arr[0], 0, 4);
	}
	return $arr;
}

/**
 * Obtiene html para desplegar una dirección de correo electrónico dada una clave 
 * pública o privada
 * para obtener una clave, ve a:
 *
 * http://mailhide.recaptcha.net/apikey
 */
function recaptcha_mailhide_html($pubkey, $privkey, $email) {
	$emailparts = _recaptcha_mailhide_email_parts ($email);
	$url = recaptcha_mailhide_url ($pubkey, $privkey, $email);
	
	return htmlentities($emailparts[0]) . "<a href='" . htmlentities ($url) .
		"' onclick=\"window.open('" . htmlentities ($url) . "', '', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0,width=500,height=300'); return false;\" title=\"Reveal this e-mail address\">...</a>@" . htmlentities ($emailparts [1]);

}


?>
